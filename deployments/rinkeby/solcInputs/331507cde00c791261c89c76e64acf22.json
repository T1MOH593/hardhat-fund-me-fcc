{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 constant MINIMAL_USD = 1 * 1e18;\n    uint256 a = 3;\n\n    mapping(address => uint256) addressToAmountFunded;\n    address[] funders;\n    mapping(address => uint256) addressToFundersIndex;\n\n    address payable public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner);\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = payable(msg.sender);\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(msg.value.convertValueToUsd(priceFeed) >= MINIMAL_USD);\n        if (addressToFundersIndex[msg.sender] == 0) {\n            funders.push(msg.sender);\n            addressToFundersIndex[msg.sender] = funders.length;\n        }\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 i = 0; i < funders.length; i++) {\n            addressToAmountFunded[funders[i]] = 0;\n        }\n        funders = new address[](0);\n        (bool successCall, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(successCall, \"not successful\");\n    }\n\n    function get(address addr) public view returns (uint256) {\n        return addressToAmountFunded[addr];\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function convertValueToUsd(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256 usdAmount) {\n        uint256 ethPrice = getPrice(priceFeed);\n        usdAmount = (ethPrice * ethAmount) / 1e18;\n    }\n\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // int256 price = 110000000000;\n        return uint256(price * 1e10);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}